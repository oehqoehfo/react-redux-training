{"version":3,"sources":["clickComponent.js","redux/action.js","redux/reducer.js","totalClicked.js","App.js","serviceWorker.js","index.js"],"names":["ClickComponent","props","className","onClick","this","click","onContextMenu","rightClick","React","Component","connect","dispatch","type","initialState","totalClick","totalRightClick","TotalClicked","state","App","Boolean","window","location","hostname","match","store","createStore","action","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+OAGMA,E,kDACF,WAAYC,GAAO,uCACTA,G,qDAGN,OACI,yBAAKC,UAAU,UAAUC,QAASC,KAAKH,MAAMI,MACrBC,cAAeF,KAAKH,MAAMM,YAC9C,6C,GARaC,IAAMC,WAuBpBC,cACX,MAXuB,SAAAC,GACvB,MAAM,CACFN,MAAO,WACHM,EClBsB,CAC9BC,KAFoB,WDqBhBL,WAAW,WACPI,EChB0B,CAClCC,KAFyB,oBDqBdF,CAGbV,G,OE5BIa,EAAc,CAChBC,WAAW,EACXC,gBAAgB,GCAdC,E,kDACF,WAAYf,GAAO,uCACTA,G,qDAGN,OACI,yBAAKC,UAAU,gBACX,0CAAgBE,KAAKH,MAAMgB,MAAMH,WAAjC,qBACmBV,KAAKH,MAAMgB,MAAMF,sB,GARzBP,IAAMC,WAgBlBC,eAHS,SAAAO,GACpB,MAAO,CAACA,WAEGP,CAAyBM,GCPzBE,MATf,WACE,OACE,iCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,OCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVN,IAAMC,EAAQC,aJHC,WAAoC,IAA3BR,EAA0B,uDAApBJ,EAAaa,EAAO,uCAC9C,OAAOA,EAAOd,MACV,IDPgB,QCQZ,kCACOK,GADP,IAEIH,aAAaG,EAAMH,aAE3B,IDPqB,cCQjB,kCACOG,GADP,IAEIF,kBAAkBE,EAAMF,kBAEhC,QACI,sBAAUE,OITtBU,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,QAGJM,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f1e77bd8.chunk.js","sourcesContent":["import React from 'react';\r\nimport {clickFunction, rightClickFunction} from './redux/action';\r\nimport { connect } from \"react-redux\";\r\nclass ClickComponent extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"clickMe\" onClick={this.props.click} \r\n                                    onContextMenu={this.props.rightClick}>\r\n                <p>Click Me!</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch =>{\r\n    return{\r\n        click: ()=>{\r\n            dispatch(clickFunction())\r\n        },\r\n        rightClick:()=>{\r\n            dispatch(rightClickFunction())\r\n        }\r\n    }\r\n}\r\nexport default connect(\r\n    null,\r\n    mapDispatchToProps\r\n)(ClickComponent);","export let clickAction =\"CLICK\";\r\nexport const clickFunction = ()=>({\r\n    type:clickAction\r\n});\r\n\r\nexport let rightClickAction =\"RIGHT CLICK\";\r\nexport const rightClickFunction =()=>({\r\n    type:rightClickAction\r\n});","import {clickAction, rightClickAction} from './action';\r\nconst initialState ={\r\n    totalClick:0,\r\n    totalRightClick:0\r\n};\r\nexport default function(state=initialState,action){\r\n    switch(action.type){\r\n        case clickAction:\r\n            return{\r\n                ...state,\r\n                totalClick:++state.totalClick\r\n            }\r\n        case rightClickAction:\r\n            return{\r\n                ...state,\r\n                totalRightClick:++state.totalRightClick\r\n            }\r\n        default:\r\n            return{...state}\r\n    }\r\n};","import React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport clickReducer from './redux/reducer';\r\nclass TotalClicked extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"totalClicked\">\r\n                <p>total click:{this.props.state.totalClick} \r\n                total right click:{this.props.state.totalRightClick}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state=>{\r\n    return {state};\r\n}\r\nexport default connect(mapStateToProps)(TotalClicked);","import React from 'react';\nimport ClickComponent from './clickComponent';\nimport TotalClicked from './totalClicked';\nfunction App() {\n  return (\n    <section>\n      <ClickComponent/>\n      <TotalClicked/>\n    </section>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux';\nimport clickReducer from './redux/reducer';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(clickReducer);\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}